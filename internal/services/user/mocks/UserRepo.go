// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	user "github.com/justcgh9/merch_store/internal/models/user"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: _a0
func (_m *UserRepo) CreateUser(_a0 user.User) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(user.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUser provides a mock function with given fields: username
func (_m *UserRepo) GetUser(username string) (user.User, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (user.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) user.User); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
