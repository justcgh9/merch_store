//go:build !coverage
// +build !coverage

// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	user "github.com/justcgh9/merch_store/internal/models/user"
	mock "github.com/stretchr/testify/mock"
)

// Authenticator is an autogenerated mock type for the Authenticator type
type Authenticator struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: token
func (_m *Authenticator) Authenticate(token string) (user.UserDTO, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 user.UserDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (user.UserDTO, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) user.UserDTO); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(user.UserDTO)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthenticator creates a new instance of Authenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthenticator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Authenticator {
	mock := &Authenticator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
