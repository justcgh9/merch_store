//go:build !coverage
// +build !coverage

// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	inventory "github.com/justcgh9/merch_store/internal/models/inventory"
	mock "github.com/stretchr/testify/mock"
)

// Informator is an autogenerated mock type for the Informator type
type Informator struct {
	mock.Mock
}

// Informate provides a mock function with given fields: username
func (_m *Informator) Informate(username string) (inventory.Info, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for Informate")
	}

	var r0 inventory.Info
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (inventory.Info, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) inventory.Info); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(inventory.Info)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInformator creates a new instance of Informator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInformator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Informator {
	mock := &Informator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
